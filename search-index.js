var searchIndex = JSON.parse('{\
"evaluate":{"doc":"","t":[5],"n":["main"],"q":["evaluate"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"lambda":{"doc":"","t":[13,4,13,4,6,13,13,13,11,11,11,11,0,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5],"n":["Application","Expression","Function","LambdaError","ParseResult","RuntimeError","SyntaxError","Variable","borrow","borrow","borrow_mut","borrow_mut","church","clone","clone","clone_into","clone_into","eq","evaluate","evaluate","evaluate_no_normalization","evaluate_normalized","fmt","fmt","fmt","fmt","from","from","from_str","into","into","mul","new_application","new_function","new_variable","normalize","normalize_variables","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","1","1","0","0","ADD","MUL","ONE","POW","PRED","SUCC","THREE","TWO","ZERO","add","mul","one","pow","pred","succ","three","two","zero"],"q":["lambda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda::Expression","","","","","lambda::LambdaError","","lambda::church","","","","","","","","","","","","","","","","",""],"d":["","An expression in the lambda calculus.","","An error with a lambda expression.","A result of parsing a lambda term.","","","","","","","","Constants for common functions from Church’s formalism.","","","","","","Evaluate an expression and return the normalized result.","","Evaluate an expression that is already normalized, without …","Evaluate an expression that is already normalized.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Normalize variables in an expression to avoid name …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,2,2,1,2,1,2,1,0,2,1,2,1,1,0,1,0,0,2,2,1,1,2,1,1,2,1,1,1,1,1,1,0,2,1,2,1,2,1,2,1,2,1,3,4,5,4,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["lambdaerror",4]],["lambdaerror",4]],[[["expression",4]],["expression",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["expression",4],["expression",4]],["bool",0]],[[["expression",4]],["expression",4]],[[["expression",4]],["expression",4]],[[["expression",4]],["expression",4]],[[["expression",4]],["expression",4]],[[["lambdaerror",4],["formatter",3]],["result",6]],[[["lambdaerror",4],["formatter",3]],["result",6]],[[["expression",4],["formatter",3]],["result",6]],[[["expression",4],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["parseresult",6]],[[]],[[]],[[["expression",4],["expression",4]],["expression",4]],[[["expression",4],["expression",4]],["expression",4]],[[["string",3],["expression",4]],["expression",4]],[[["str",0]],["expression",4]],[[["expression",4]],["expression",4]],[[["expression",4]],["expression",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]],[[],["expression",4]]],"p":[[4,"Expression"],[4,"LambdaError"],[13,"Variable"],[13,"Function"],[13,"Application"],[13,"SyntaxError"],[13,"RuntimeError"]]},\
"parse":{"doc":"","t":[5],"n":["main"],"q":["parse"],"d":[""],"i":[0],"f":[[[]]],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
